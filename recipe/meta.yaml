{% set name = "openmm" %}
{% set version = "7.5.0" %}
{% set build = 2 %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  # pre-rc
  url: https://github.com/openmm/{{ name }}/archive/2c36e9b34d046f09be4887ff60e7fdac02cf3cdb.tar.gz
  sha256: 193a501d10ca713443e44e0d8972c5d3f30ee0ed116d59679d1cbdabd6b96b28

build:
  number: {{ build }}
  string: "py{{ PY_VER }}h{{ PKG_HASH }}_{{ build }}_{{ opencl_impl }}"  # [osx]
  track_features:  # make khronos low priority
    - openmm_opencl_khronos  # [osx and (opencl_impl == 'khronos')]
  skip: true  # [(cuda_compiler_version in (undefined, 'None') and (linux64 or win)) or ((cuda_compiler_version != '10.2') and (ppc64le))]
  missing_dso_whitelist:
    - "*/libcuda.*"    # [linux64 or ppc64le]
    - "*/libOpenCL.*"  # [unix]
    - "*/nvcuda.dll"   # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [linux64 or ppc64le or win]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - cmake
    - make  # [unix]
    - jom  # [win]

  host:
    - python
    - fftw
    - swig
    - pthread-stubs
    - lxml
    - numpy
    - cython
    # needed for Python wrappers
    - doxygen 1.8.14
    # OpenCL ICD
    - ocl-icd  # [linux]
    - khronos-opencl-icd-loader  # [win or (osx and opencl_impl == 'khronos')]

  run:
    - python
    - fftw
    - numpy
    # OpenCL ICD
    - ocl-icd  # [linux]
    - ocl-icd-system  # [linux]
    - khronos-opencl-icd-loader  # [win or (osx and opencl_impl == 'khronos')]
    - ocl_icd_wrapper_apple      # [osx and opencl_impl == 'khronos']

  run_constrained:
    - khronos-opencl-icd-loader  ==9999999999  # [osx and opencl_impl == 'apple']
    - ocl_icd_wrapper_apple      ==9999999999  # [osx and opencl_impl == 'apple']

test:
  requires:
    - pocl  # [linux]
  imports:
    - simtk
    - simtk.openmm
  commands:
    ## Are the key libraries built?
    # Existence tests Unix
    - test -f $PREFIX/lib/libOpenMM$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT  # [linux64 or ppc64le]
    - test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT  # [linux64 or ppc64le]
    # Existence tests Windows
    - if not exist %LIBRARY_LIB%/OpenMM.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1  # [win]

    ## Do they work properly?
    # Debug silent errors in plugin loading
    - python -c "import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"
    # Check that hardcoded library path was correctly replaced by conda-build
    - python -c "import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'"

    # Check all platforms
    - python -m simtk.testInstallation
    # Linux64 / PPC see all 4 platforms, but CUDA is not usable because there's no GPU there
    - python -c "from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'"  # [linux64 or ppc64le]
    # Windows will only see 2 because the driver nvcuda.dll is missing and that throws a 126 error
    - python -c "from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'"  # [win]
    # MacOS / ARM only see 3 because CUDA is not available there
    - python -c "from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'"  # [osx or aarch64]

    # Run a small MD
    - cd ${CONDA_PREFIX}/share/openmm/examples  # [unix]
    - cd %LIBRARY_PREFIX%/share/openmm/examples  # [win]
    - python benchmark.py --test=rf --seconds=10 --platform=Reference
    - python benchmark.py --test=rf --seconds=10 --platform=CPU

about:
  home: http://openmm.org
  license: LGPL-3.0-or-later
  license_family: LGPL
  license_file:
    - docs-source/licenses/Licenses.txt
    - docs-source/licenses/LGPL.txt
    - docs-source/licenses/GPL.txt
  summary: A high performance toolkit for molecular simulation.

  description: |
    OpenMM is a toolkit for molecular simulation. It can be used either as a
    stand-alone application for running simulations, or as a library you call
    from your own code. It provides a combination of extreme flexibility
    (through custom forces and integrators), openness, and high performance
    (especially on recent GPUs) that make it truly unique among simulation
    codes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL
    platforms).
  doc_url: http://docs.openmm.org
  dev_url: https://github.com/openmm/openmm

extra:
  recipe-maintainers:
    - jchodera
    - jaimergp
    - peastman
