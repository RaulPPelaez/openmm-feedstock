{% set name = "openmm" %}
{% set version = "7.4.2" %}
{% set build = 3 %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/openmm/{{ name }}/archive/{{ version }}.tar.gz
  sha256: 2e121ad5cfcc4840861032bb1b11d4d0aea2d3ca3c59baaed73b8b0b4fd069cc
  # Remove when OpenMM 7.5 is released; this only fixes a building error on Py39
  patches:
  - py39-xml.patch

build:
  number: {{ build }}
  skip: true  # [win or (linux64 and cuda_compiler_version == "None")]
  missing_dso_whitelist:
    - '*/libcuda.*'  # [linux]
    - "*/libOpenCL.*"  # [unix]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [linux]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - cmake
    - make  # [unix]
    - jom  # [win]

  host:
    - python
    - fftw
    - swig
    - pthread-stubs
    - lxml
    - numpy
    - cython
    # needed for Python wrappers
    - doxygen 1.8.14
    # OpenCL ICD
    - ocl-icd  # [linux]
    - khronos-opencl-icd-loader  # [win]

  run:
    - python
    - fftw
    - numpy
    # OpenCL ICD
    - ocl-icd  # [linux]
    - ocl-icd-system  # [linux]
    - khronos-opencl-icd-loader  # [win]

test:
  requires:
    - pocl  # [linux]
  imports:
    - simtk
    - simtk.openmm
  commands:
    ## Are the key libraries built?
    # Existence tests Unix
    - test -f $PREFIX/lib/libOpenMM$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT  # [linux]
    - test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT  # [linux]
    # Existence tests Windows
    - if not exist %LIBRARY_LIB%/OpenMM.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1  # [win]

    ## Do they work properly?
    # Debug silent errors in plugin loading
    - python -c "import simtk.openmm as mm; print(*mm.pluginLoadedLibNames, *mm.Platform.getPluginLoadFailures(), sep='\n')"
    # Check that hardcoded library path was correctly replaced by conda-build
    - python -c "import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'"

    # Check all platforms
    - python -m simtk.testInstallation
    # Linux/Windows see all 4 platforms, but CUDA is not usable because there's no GPU there
    - python -c "from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'"  # [linux or win]
    # MacOS only sees 3 because CUDA is not available there
    - python -c "from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'"  # [osx]

    # Run a small MD
    - cd ${CONDA_PREFIX}/share/openmm/examples  # [unix]
    - cd %LIBRARY_PREFIX%/share/openmm/examples  # [win]
    - python benchmark.py --test=rf --seconds=10 --platform=Reference
    - python benchmark.py --test=rf --seconds=10 --platform=CPU

about:
  home: http://openmm.org
  license: LGPL-3.0-or-later
  license_family: LGPL
  license_file:
    - docs-source/licenses/Licenses.txt
    - docs-source/licenses/LGPL.txt
    - docs-source/licenses/GPL.txt
  summary: A high performance toolkit for molecular simulation.

  description: |
    OpenMM is a toolkit for molecular simulation. It can be used either as a
    stand-alone application for running simulations, or as a library you call
    from your own code. It provides a combination of extreme flexibility
    (through custom forces and integrators), openness, and high performance
    (especially on recent GPUs) that make it truly unique among simulation
    codes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL
    platforms).
  doc_url: http://docs.openmm.org
  dev_url: https://github.com/openmm/openmm

extra:
  recipe-maintainers:
    - jchodera
    - jaimergp
    - peastman
